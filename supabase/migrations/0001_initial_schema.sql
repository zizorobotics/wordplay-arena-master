-- Create a table for public user profiles
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  updated_at TIMESTAMPTZ,
  username TEXT UNIQUE,
  avatar_url TEXT,
  CONSTRAINT username_length CHECK (char_length(username) >= 3)
);

-- Add comments for clarity
COMMENT ON TABLE public.profiles IS 'Stores public profile information for users.';

-- Set up Row Level Security (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);


-- Create the table to store the dictionary of valid words
CREATE TABLE public.words (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  word TEXT NOT NULL UNIQUE,
  length SMALLINT NOT NULL
);

-- Create an index on the word length for faster lookups
CREATE INDEX ON public.words (length);

-- Add comments for clarity
COMMENT ON TABLE public.words IS 'Dictionary of valid words for the game.';

-- Enable Row Level Security for the words table
ALTER TABLE public.words ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Words are viewable by all authenticated users." ON public.words FOR SELECT TO authenticated USING (true);


-- Create the main table to store game state
CREATE TABLE public.games (
  id UUID PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  status TEXT DEFAULT 'waiting' NOT NULL, -- waiting, playing, finished
  target_word TEXT NOT NULL,
  word_length SMALLINT NOT NULL,
  max_guesses SMALLINT DEFAULT 6 NOT NULL,
  players JSONB,
  current_player_id UUID REFERENCES auth.users(id),
  winner_id UUID REFERENCES auth.users(id),
  turn_history JSONB
);

-- Add comments for clarity
COMMENT ON COLUMN public.games.status IS 'The current phase of the game: waiting, playing, or finished.';
COMMENT ON COLUMN public.games.players IS 'A JSON object containing the state for each player in the game.';
COMMENT ON COLUMN public.games.turn_history IS 'An array of moves made, for turn-based games.';

-- Enable Row Level Security for the games table.
-- This is a crucial security step. By default, no one can access the table.
ALTER TABLE public.games ENABLE ROW LEVEL SECURITY;

-- Create policies to define access rules.

-- POLICY: Allow authenticated users to create (insert) new games.
CREATE POLICY "Allow authenticated users to create games"
ON public.games
FOR INSERT
TO authenticated
WITH CHECK (true);

-- POLICY: Allow players in a game to view (select) its state.
CREATE POLICY "Allow players to view their own games"
ON public.games
FOR SELECT
TO authenticated
USING (
  players ? auth.uid()::text
);

-- POLICY: Allow the current player to update the game state (make a move).
CREATE POLICY "Allow current player to update the game"
ON public.games
FOR UPDATE
TO authenticated
USING (
  current_player_id = auth.uid()
)
WITH CHECK (
  current_player_id = auth.uid()
);


-- Create the PostgreSQL function to get a random word efficiently
CREATE OR REPLACE FUNCTION get_random_word(word_len smallint)
RETURNS TABLE (word text) AS $$
BEGIN
  RETURN QUERY
  SELECT w.word FROM public.words AS w
  WHERE w.length = word_len
  ORDER BY random()
  LIMIT 1;
END;
$$ LANGUAGE plpgsql;

